extends ../../templates/main-layout.pug

block content
  h1.
    High Altitude Weather balloon

  h2(style="background:#B00").
    This article is a work-in-progress!

  div(class="article-image-wrapper" style="width:100%")
    div(class="article-image")
      img(src="/images/0001-weather-balloon/weather-balloon-apex.jpg")

  h2.
    About The Project

  p.
    "Watchful Eagle" began as a high school project between me and a couple other students to see whether we could deploy and recover a payload of sensors and video cameras attached to a weather balloon. Funding for this project was sourced through the generous contributions of our 45 backers on Kickstarter, who ultimately allowed us to raise $970 towards funding the supplies that went into making this whole thing possible.

  p.
    We had a couple goals in mind when we entered this project:
  
  ul
    li.
      Deploy a collection of sensors into the stratosphere and recover the payload safely
    li.
      Capture a continuous video and timelapse of the whole journey
    li.
      Relay back a live video feed from the payload that could be viewed during ascent

  p.
    All-in-all, fundraising began at the end of 2015, development took place between 2015 and 2016, and the final balloon made its ascent during the summer of 2017 after an available launch window was chosen.

  div(class="article-image-wrapper" style="width:70%")
    div(class="article-image" style="display:block;margin-left:auto;margin-right:auto")
      img(src="/images/0001-weather-balloon/funding_goals.jpg")
      p.
        Fundraising goals listed on our Kickstarter campaign

  h2.
    Design And Components

  p.
    The following materials went into making this project possible:

  ul
    li.
      Weather balloon (2000 grams) + Helium tank
    li.
      Parachute
    li.
      #[a(href="https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/?resellerType=home") Raspberry Pi 3 B+ computer] + #[a(href="https://www.sparkfun.com/products/13717") breakout "wedge" board]

    li.
      #[a(href="https://www.ravpower.com/products/rp-pb41-26800mah-power-bank") Ravpower 26800mAh power bank]
    li.
      #[a(href="https://www.globalstar.com/en-us/products/spot-for-business/spot-trace") SPOT satellite tracking device]
    li Various sensors interfacing with the Raspberry Pi
      ul
        li.
          #[a(href="https://www.adafruit.com/product/1603") BMP180 barometer]
        li.
          #[a(href="https://www.sparkfun.com/products/12909") MS5803-14BA pressure sensor]
        li.
          #[a(href="https://www.sparkfun.com/products/9836") Three-axis accelerometer]
        li.
          #[a(href="https://www.adafruit.com/product/1746") HMC5883L compass]
        li.
          #[a(href="https://www.adafruit.com/product/746") GPS module] + external antenna
        li.
          #[a(href="https://www.raspberrypi.org/products/camera-module-v2/") Camera module]
    li.
      Long distance analog video #[a(href="https://www.readymaderc.com/products/details/rmrc-900mhz-1500mw*-transmitter-black-edition-intl") transmitter] + #[a(href="https://www.readymaderc.com/products/details/rmrc-900mhz-1-3ghz-receiver-1258-with-rmrc-comtech-tuner") receiver]

  h3.
    Telemetry Electronics

  p.
    We developed a custom electronic board and supporting software to record telemetry for this project. The board ended up being a simple collection of sensors mounted to a breakout board, which interfaced with a Raspberry Pi computer via an I2C bus (barometers + accelerometer + compass) and serial connection (GPS).

  div(class="article-image-wrapper" style="width:100%")
    div(class="article-image" style="display:block;margin-left:auto;margin-right:auto")
      img(src="/images/0001-weather-balloon/electronics.jpg")
      p.
        Partial collection of parts, mostly sourced from SparkFun and Adafruit

  p.
    The assembled computer and sensors module were installed in a styrofoam box, along with the video transmitter and battery bank. Due to the very cold conditions outside, it was critical that this box was insulated. The heat generated by the transmitter and Raspberry Pi served as a crude way of keeping these internals warm — particularly the battery bank, which drops in capacity at lower temperatures.

  div(class="article-image-wrapper" style="width:70%")
    div(class="article-image" style="display:block;margin-left:auto;margin-right:auto")
      img(src="/images/0001-weather-balloon/payload_electronics.jpg")
      p.
        Electronics installed in the payload box

  p.
    Around the outside of the final payload box, we installed two knockoff GoPros to capture both video and timelapse of the balloon's flight. Both of these cameras were charged by a separate power bank installed on top of the telemetry box, and mounted on a 45 degree angle to capture a good shot of the earth below.

  h3.
    Live Video + Telemetry System

  p.
    Video and telemetry was transmitted from the weather balloon over a 1.5W analog video transmitter, operating at 910Mhz. The Raspberry Pi's display output was used as a video source, and an application was run on the Raspberry Pi which displayed telemetry data and one of our Ham radio call signs alongside the video feed from the Raspberry Pi camera module.

  div(class="article-image-wrapper" style="width:100%")
    div(class="article-image" style="display:block;margin-left:auto;margin-right:auto")
      img(src="/images/0001-weather-balloon/payload_antenna.jpg")
      p.
        Antenna attached to the payload

  p.
    We ended up developing three custom directional antennas to relay back video streamed from the balloon. Two of the antennas were mounted on top of chase cars, and one was attached to the bottom of the balloon. We ended up reaching out to a local group of Ham radio enthusiasts, who helped us tune these antennas to the frequency used to transmit the analog video stream.

  div(class="article-image-wrapper" style="width:100%")
    div(class="article-image" style="display:block;margin-left:auto;margin-right:auto")
      img(src="/images/0001-weather-balloon/antenna_on_car.jpg")
      p.
        A receiver antenna mounted on top of a chase car

  p.
    In both cars, a RCA-to-USB conversion device was used to process the video received and forward it to #[a(href="https://obsproject.com/") Open Broadcaster Software Studio], which published the stream on Youtube for our donors to watch.

  h2.
    Software

  p.
    Software for the telemetry and video system were primarily written in C++, with a simple web interface for displaying telemetry alongside the video feed. Sensor data was fetched at a rate of 200Hz, and both stored on the SD card and displayed on the web interface for relaying back to the ground receiver. Since I was most familiar with FIRST Robotics programming at the time, I opted to use many of the developer tools used by my school's robotics team in this project.

  p.
    #[a(href="https://github.com/comran/SpartanBalloon2016") Code used for this project is publicly available here]

  h3.
    Sensor Receiver

  p.
    Data from the accelerometer, compass, barometer, and temperature sensors was fetched in a simple loop that polled for new values over the I2C bus. This data was then written to a shared message queue, which allowed other processes to access this data without much overhead. Since the GPS messages arrived at a much slower rate over a separate serial interface, another process handled fetching the current location and writing this location to another shared message queue.

  h3.
    Logger

  p.
    Data from the accelerometer, compass, barometer, and temperature sensors was fetched in a simple loop that polled for new values over the I2C bus. This data was then written to a shared message queue, which allowed other processes to access this data without much overhead. Since the GPS messages arrived at a much slower rate over a separate serial interface, another process handled fetching the current location and writing this location to another shared message queue.

  h3.
    Web Interface

  p.
    Sensor data was also consumed by an HTTP server, which #[a(href="https://github.com/comran/SpartanBalloon2016/blob/master/y2016_balloon/http_status/http_status.cc#L73") serialized the information] in a custom format and sent it to a HTML frontend. A #[a(href="https://github.com/comran/SpartanBalloon2016/blob/master/y2016_balloon/http_status/www/index.html#L80") Javascript routine handled polling this data] and translating it into an HTML table, where it could be viewed alongside the video stream sourced from the Raspberry Pi camera module.

  div(class="article-image-wrapper" style="width:100%")
    div(class="article-image" style="display:block;margin-left:auto;margin-right:auto")
      img(src="/images/0001-weather-balloon/web_interface.jpg")
      p.
        Demo of the web interface streamed over the radio

  h2.
    Launch Day

  p.
    September 4th, 2017 was chosen as our launch day based off weather forecasts at the time and approximate flight paths generated by #[a(href="https://predict.habhub.org/") an online weather balloon prediction tool]. Ultimately, there was a large delay between the start of the project and launch day due to group members graduating and moving away for college.

  p.
    We ended up launching far away from our hometown of Mountain View, California to mitigate the chances of running into airspace used by the airports in the area — namely, SFO, SJC, and Moffett Field. We instead drove to a small town in Fresno County called Kerman, which was about 150 miles away from our hometown. This area seemed best fit since it was well clear of any active airspace, and was surrounded entirely by rural farms where our balloon could safely land. Additionally, the highway system ran parallel with the expected flight path of the balloon, which gave us a better chance of receiving the video transmission.

  div(class="article-image-wrapper" style="width:100%")
    div(class="article-image" style="display:block;margin-left:auto;margin-right:auto")
      img(src="/images/0001-weather-balloon/launch_site.jpg")
      p.
        Our launch site at Lion's Park in Kerman, California (from Google Maps)

  h2.
    Recovered Data

  h3.
    Telemetry Sensor Results

  ul
    li #[b Launch] at 0:00:00
    li #[b Pop] at 1:09:09
    li #[b Land] at 1:48:15
    li #[b Launch &rarr; Land Distance] 52km (32 miles)
    li #[b Launch &rarr; Pop Distance] 34km (21 miles)

  div(class="article-image-wrapper" style="width:100%")
    div(class="article-image" style="display:block;margin-left:auto;margin-right:auto")
      img(src="/images/0001-weather-balloon/altitude_plot.png")

  p.
    Both the GPS altitude and barometer altitude estimate are shown above. The barometer measurement begins to deviate above 6km due to a combination of thinner air, low temperatures, and possible mis-calibration of the system for estimating high altitudes. Additionally, the GPS appears to drop out at the peak due to a loss of satellite signal during the period of increased vibrations following the balloon pop.

  p.
    Ascent velocity is constant as the balloon provides roughly static lift to the system. However, descent velocity decreases over time since air density increases at lower altitudes and the parachute provides more of an upward force to counteract gravity.

  ul
    li #[b Ascent Rate] 11mph
    li #[b Peak Altitude] 24,313 meters (about 15.1 miles)

  div(class="article-image-wrapper" style="width:100%")
    div(class="article-image" style="display:block;margin-left:auto;margin-right:auto")
      img(src="/images/0001-weather-balloon/pressure_plot.png")

  p.
    Two barometers were used since we were unsure whether the bmp180 would perform well at higher altitudes, or whether the MS5803 offered accurate estimates at low altitudes. However, both sensors ended up working fine and provided similar results.

  h2.
    Captured Video and Timelapse

  h3.
    Full Video

  div(class="article-image-wrapper" style="width:100%")
    div(class="article-image" style="display:block;margin-left:auto;margin-right:auto")
      iframe(height="500px" src="https://www.youtube.com/embed/ALnWUP6lVUU" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen).

  ul
    li #[b Takeoff] @ 0:00:12
    li #[b Pop] @ 1:08:28
    li #[b Land] @ 1:48:20

  h3.
    Timelapse

  p.
    Photos were taken at 3 second intervals, and stitched together into a video.

  div(class="article-image-wrapper" style="width:100%")
    div(class="article-image" style="display:block;margin-left:auto;margin-right:auto")
      iframe(height="500px" src="https://www.youtube.com/embed/GbNrbzed4QY" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen).

  ul
    li #[b Takeoff] @ 00:33
    li #[b Pop] @ 07:31
    li #[b Land] @ 11:35

